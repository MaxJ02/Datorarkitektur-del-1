1. 

CPU:ns instruktionscykel kallas processen där CPU:n exekverar instruktioner. Detta är en process som sker i fyra steg som består av hämtning, avkodning, exekvering och 
återskrivning.

Hämta: Programräknaren (PC) pekar på adressen för nästa instruktion i programminnet. Instruktionen hämtas och lagras i instruktionsregistret (IR).

Avkoda: CPU:n analyserar instruktionen som är lagrad i IR till en op-kod och eventuella nödvändiga operander.

Execute: Operationen som specificeras av opcoden och operanderna exekveras.

Återskrivning: Resultaten av operationen lagras i minnet eller ett register.

"Demonstrera motsvarande C-kod C för beskrivningen. Använd tre befintliga OP-koder för beskrivningen"

FETCH:
      case CPU_STATE_FETCH:
      {
         ir = program_memory_read(pc); /* Fetches next instruction. */
         mar = pc;                     /* Stores address of current instruction. */
         pc++;                         /* Program counter points to next instruction. */
         state = CPU_STATE_DECODE;     /* Decodes the instruction during next clock cycle. */
         break;
      }

DECODE:

  case CPU_STATE_DECODE:
      {        
         op_code = ir >> 16;           /* Bit 23 downto 16 consists of the OP code. */
         op1 = ir >> 8;                /* Bit 15 downto 8 consists of the first operand. */
         op2 = ir;                     /* Bit 7 downto 0 consists of the second operand. */
         state = CPU_STATE_EXECUTE;    /* Executes the instruction during next clock cycle. */
         break;
}

EXECUTE:
case CPU_STATE_EXECUTE:
      {
         switch (op_code) /* Checks the OP code.*/
         {
         case NOP: /* NOP => do nothing. */
         {
            break; 
         }
         case LDI: /* LDI R16, 0x01 => op_code = LDI, op1 = R16, op2 = 0x01 */
         {
            reg[op1] = op2; 
            break;
         }
         case MOV: /* MOV R17, R16 => op_code = MOV, op1 = R17, op2 = R16 */
         {
            reg[op1] = reg[op2]; 
            break;
         }
         case OUT: /* OUT DDRB, R16 => op_code = OUT, op1 = DDRB, op2 = R16 */
         {
            data_memory_write(op1, reg[op2]); /* Writes to address 0 - 255. */
            break;
         }
         case IN: /* IN R16, PINB => op_code = IN, op1 = R16, op2 = PINB */
         {
            reg[op1] = data_memory_read(op2); /* Reads from address 0 - 255. */
            break;
         }
         case STS: /* STS counter, R16 => op_code = STS, op1 = counter, op2 = R16 */
         {
            data_memory_write(op1 + 256, reg[op2]); /* Offset 256 => writes to address 256 - 511. */
            break;
         }
         case LDS: /* LDS R16, counter => op_code = LDS, op1 = R16, op2 = counter */
         {
            reg[op1] = data_memory_read(op2 + 256); /* Offset 256 => reads from address 256 - 511. */
            break;
         }
         case JMP:
         {
            pc = op1; /* JMP 0x05 => op_code = JMP, op1 = 0x05 */
            break;
         }
         default:
         {
            control_unit_reset(); /* System reset if error occurs. */
            break;
         }
         }

         state = CPU_STATE_FETCH; /* Fetches next instruction during next clock cycle. */
         break;
      }
      default: /* System reset if error occurs. */
      {
         control_unit_reset();
         break;
      }
   }
   return;
}


2. Förklara vad följande element har för funktion i en CPU:

a) Programminnet: Är en typ av minne som används för att lagra instruktionerna som CPU:n behöver för att köra ett program.

b) Dataminnet: Är en typ av minne som används för att lagra data som bearbetas av CPU:n.

c) Programräknaren: Är ett register i CPU:n som håller reda på adressen till nästa instruktion som ska exekveras från programminnet.

d) Instruktionsregistret: Är ett register i CPU:n som innehåller den instruktion som för närvarande exekveras.

e) CPU-register: Dessa är små, snabba lagringsplatser inom CPU:n som håller kvar data tillfälligt under exekveringen av en instruktion.

f) Stacken: Detta är en typ av datastruktur som lagrar data i en ordningen sist in, först ut (LIFO), där det senast tillagda objektet är det första som tas bort.

g) Stackpekaren: Detta är ett register i CPU:n som håller reda på den aktuella platsen i stacken. Stackpekaren uppdateras varje gång data skjuts på eller hoppar av stapeln.

3.

 .CSEG- och .DSEG-direktiven används i AVR-assembler för att deklarera programmets kod respektive datasegment. 
 .CSEG-direktivet används för att deklarera segmentet som innehåller programmets kod,
 och .DSEG-direktivet används för att deklarera segmentet som innehåller datan för programmet.
 Kodsegmentet innehåller alla instruktioner som CPU:n kommer att exekvera, medan datasegmentet innehåller alla variabler och konstanter som används av programmet.
 Tillsammans utgör koden och datasegmenten programmets minne.

4. Förklara vad som menas med OP-kod och operander:

OP-kod är en kod som specificerar operationen som ska utföras av CPU:n. Det är alltså den binära representationen av instruktionen som CPU:n ska utföra.

Operander är parametrear eller data, vilka operationen specificerad av op koden utförs på. Till exempel, om OP-koden specificerar en additionsoperation, skulle operanderna vara de två talen som ska läggas till. Operanderna kan specificeras i själva instruktionen eller så kan de lagras i minnes- eller CPU-register och refereras till av instruktionen.


Identifiera OP-kod samt operander i följande instruktioner och
förklara vad respektive subrutin nedan har för funktion:

subrutin 1:

LDI R24, (1 << 1):

OP-kod: LDI (Load Immediate)
Operand: R24, (1 << 1)
Funktion: Laddar det omedelbara värdet (1 << 1), vilket är 2, i register R24.


OUT DDRB, R24

OP-kod: OUT
Operand: DDRB, R24
Funktion: Skriver innehållet i R24 till I/O-registret DDRB (Data Direction Register B), 
som ställer in riktningen för motsvarande pin på Port B till inputs eller outputs.



subrutin 2:

IN R24, PORTB:

OP-kod: IN
Operand: R24, PORTB
Funktion: Läser värdet från I/O-registret PORTB och lagrar det i register R24.


ORI R24, (1 << 1):

OP-kod: ORI (Logical OR with Immediate)
Operand: R24, (1 << 1)
Funktion: Utför en bitvis OR-operation mellan innehållet i R24 och det omedelbara värdet (1 << 1), vilket är 2. Resultatet lagras i R24.


OUT PORTB, R24:

OP-kod: OUT
Operand: PORTB, R24
Funktion: Skriver innehållet i R24 till I/O-registret PORTB, vilket ställer in tillståndet för motsvarande pin på Port B till högt eller lågt.



subrutin 3:

IN R24, PORTB:

OP-kod: IN
Operand: R24, PORTB
Funktion: Läser värdet från I/O-Registret PORTB och lagrar det i register R24.


ANDI R24, ~(1 << 1):

OP-kod: ANDI (Logical AND with Immediate)
Operand: R24, ~(1 << 1)
Funktion: Utför en bitvis AND-operation mellan innehållet i R24 och det omedelbara värdet ~(1 << 1), 
vilket är en bitmask med den andra biten rensad. Resultatet lagras i R24.

OUT PORTB, R24:

OP-kod: OUT
Operand: PORTB, R24
Funktion: Skriver innehållet i R24 till I/O-registret PORTB, vilket ställer in tillståndet för motsvarande pin på portB som högt eller lågt.
